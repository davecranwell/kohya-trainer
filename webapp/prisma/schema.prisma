// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password    Password?
  trainings   Training[]
  roles       Role[]
  sessions    Session[]
  connections Connection[]
}

model Training {
  id           String   @id @default(cuid())
  name         String
  config       String
  triggerWord  String   @default("oxhw")
  baseModel    Json?
  gpu   Gpu? @relation(fields: [gpuId], references: [id])
  gpuId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images TrainingImage[]
  runs TrainingRun[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

// Instances of running a training
model TrainingRun {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status String

  training Training @relation(fields: [trainingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  trainingId String

  statuses TrainingStatus[]

  // non-unique foreign key
  @@index([trainingId])
}

// Statuses of each part of a TrainingRun
model TrainingStatus {
  id          String  @id @default(cuid())
  messageId   String?
  status      String
  runId       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([messageId])
  @@index([runId])

  run TrainingRun @relation(fields: [runId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model TrainingImage {
  id          String  @id @default(cuid())
  text        String?
  url         String
  name        String
  type        String
  isResized   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  training   Training   @relation(fields: [trainingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  trainingId String

  // non-unique foreign key
  @@index([trainingId])
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Gpu {
  id            String   @id @default(cuid())
  instanceId    String   @unique
  status        String   // running, stopped NB: this status currently unused
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  training      Training?
  trainingId    String?
}
